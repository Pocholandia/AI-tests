purpose: >
  Documents the state management approach, patterns, and best practices using Zustand and React Context.
main_content:
  core_principles:
    - Use Zustand for global and domain-specific state
    - One store per entity/domain (e.g., useClientesStore, usePedidosStore)
    - Organize stores by feature/domain for clarity and scalability
  store_patterns:
    - Define selectors within stores to minimize unnecessary renders
    - Use Zustand middleware persist for IndexedDB or localStorage persistence
    - Combine or decompose stores using Zustand's combine utility as needed
  memoization_performance:
    - Use React.memo, useMemo, and useCallback for expensive components/selectors
    - Prefer selectors over direct state access to avoid mass rerenders
  context_integration:
    - For cross-cutting state (e.g., notifications), use React Context
    - Pass services and stores via Context or props for dependency injection
  example_store_structure: |
    import create from 'zustand';
    export const useClientesStore = create((set, get) => ({
      clientes: [],
      fetchClientes: async () => { /* ... */ },
      // selectors and actions
    }));
usage_guidelines: |
  - Use one store per entity/domain
  - Prefer selectors and memoization for performance
  - Use Context for cross-cutting concerns
revision_policy: >
  Update when changing state management libraries or introducing new patterns. 