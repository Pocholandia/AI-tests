purpose: >
  Defines the architectural patterns, folder structure, and best practices for frontend development using React, TypeScript, and supporting libraries.
main_content:
  framework_core_technologies:
    - React + TypeScript as the UI foundation
    - Material UI for visual components and theming
    - Zustand for state management, organized by domain/feature
    - IndexedDB (Dexie.js) for local persistence
    - Service Worker for offline support and caching
    - Vite as the build tool
  folder_structure:
    src/components: Pure presentation components
    src/containers: Components connected to logic or state
    src/hooks: Reusable hooks (e.g., useForm, useNotification)
    src/repositories: Data access layer (interfaces and implementations)
    src/rules: Pure business logic and validation (must not import React/UI)
    src/stores: Zustand stores, one per entity/domain
    src/features: Each feature encapsulates its own models, store, components, and meta-registry registration
  key_patterns:
    - SOLID principles applied to all layers
    - Separation of concerns: Data, business logic, and UI are strictly separated
    - Container/Presentation pattern for components
    - Single-responsibility: Each component/module should have one clear purpose
    - Limit file size: Max 300 lines per JSX/TSX file
  state_management:
    - One Zustand store per entity/domain (e.g., useClientesStore)
    - Use selectors to minimize unnecessary renders
    - Middleware persist for IndexedDB/localStorage
    - Combine/decompose stores as needed
  dependency_injection:
    - Pass repository services via React Context or props
    - Use factory hooks (e.g., createXService) for configurable instantiation
  offline_first_synchronization:
    - Register Service Worker (Workbox/manual)
    - Use Dexie to mark entity sync state (new/updated/deleted)
    - useSync() hook for online detection, queue processing, and conflict resolution
    - UI elements for sync status and manual/auto sync
usage_guidelines: |
  - Follow the folder structure for all new features and modules
  - Apply SOLID and separation of concerns principles
  - Use provided hooks and patterns for state and data management
revision_policy: >
  Update this document when introducing new architectural patterns, libraries, or significant changes to folder structure. 